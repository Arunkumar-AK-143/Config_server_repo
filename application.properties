System.out.println("------ Inside bookTicket() ------");
System.out.println("Event ID: " + (event != null ? event.getId() : "null"));
System.out.println("User ID: " + (user != null ? user.getId() : "null"));

if (event.getTicketCount() <= 0) {
    throw new IllegalStateException("No tickets available.");
}
System.out.println("Ticket booked successfully!");
public Ticket bookTicket(Event event, User user) {
    try {
        if (event == null || user == null) {
            throw new RuntimeException("Event or user is null");
        }

        if (event.getTicketCount() <= 0) {
            throw new IllegalStateException("No tickets left");
        }

        Ticket ticket = new Ticket();
        ticket.setEvent(event);
        ticket.setUser(user);
        ticket.setBookingDate(new Date());
        ticket.setStatus("BOOKED");

        event.setTicketCount(event.getTicketCount() - 1);

        eventRepository.save(event);
        ticketRepository.save(ticket);

        return ticket;
    } catch (Exception e) {
        e.printStackTrace();  // ðŸ”´ This will show up in the backend console!
        throw new RuntimeException("Failed to book ticket", e);
    }
}