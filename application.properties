@PostMapping("/book")
public ResponseEntity<Ticket> bookTicket(@RequestParam Long eventId, HttpServletRequest request) {
    String authHeader = request.getHeader("Authorization");

    if (authHeader == null || !authHeader.startsWith("Bearer ")) {
        System.out.println("Authorization header missing or invalid.");
        return ResponseEntity.status(401).body(null);
    }

    String token = authHeader.substring(7); // Remove "Bearer "
    Long userId;

    try {
        userId = jwtService.extractUserId(token);
        System.out.println("Extracted user ID: " + userId); // âœ… DEBUG
    } catch (Exception e) {
        e.printStackTrace();
        return ResponseEntity.status(401).body(null);
    }

    if (userId == null) {
        System.out.println("User ID is null");
        return ResponseEntity.status(401).body(null);
    }

    Event event = eventService.getEventById(eventId);
    User user = userService.getUserById(userId);

    if (event == null || user == null) {
        System.out.println("Event or User not found");
        return ResponseEntity.status(404).body(null);
    }

    Ticket ticket = ticketService.bookTicket(event, user);
    return ResponseEntity.ok(ticket);
}


bookTickets(data: { eventId: number }): Observable<any> {
  const token = localStorage.getItem('jwtToken');
  const headers = new HttpHeaders({
    'Authorization': `Bearer ${token}`
  });

  const url = `${this.apiUrl}/book?eventId=${data.eventId}`;
  return this.http.post<any>(url, {}, { headers });
}