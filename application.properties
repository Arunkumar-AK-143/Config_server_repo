@GetMapping("/filter")
public ResponseEntity<List<Event>> filterEvents(
        @RequestParam(required = false) Long id,
        @RequestParam(required = false) String category) {
    List<Event> events = eventService.filterEvents(id, category);
    return ResponseEntity.ok(events);
}


public List<Event> filterEvents(Long id, String category) {
    if (id != null && category != null) {
        return eventRepo.findByIdAndCategory(id, category);
    } else if (id != null) {
        return eventRepo.findById(id).map(List::of).orElse(List.of());
    } else if (category != null) {
        return eventRepo.findByCategory(category);
    } else {
        return eventRepo.findAll();
    }
}


List<Event> findByCategory(String category);
List<Event> findByIdAndCategory(Long id, String category);


getFilteredEvents(id?: number, category?: string): Observable<Event[]> {
  let params = new HttpParams();
  if (id) params = params.set('id', id.toString());
  if (category) params = params.set('category', category);

  return this.http.get<Event[]>('http://localhost:2061/events/filter', { params });
}


filterEvents() {
  this.eventService.getFilteredEvents(this.selectedId, this.selectedCategory).subscribe(events => {
    this.filteredEvents = events;
  });
}



<input [(ngModel)]="selectedId" type="number" placeholder="Event ID" />
<input [(ngModel)]="selectedCategory" placeholder="Category" />
<button (click)="filterEvents()">Filter</button>

<div *ngFor="let event of filteredEvents">
  <h3>{{ event.name }}</h3>
  <p>Category: {{ event.category }}</p>
</div>

