import { Component, OnInit } from '@angular/core';
import { TicketService } from '../../services/ticket.service';
import { Ticket } from '../../models/ticket.model';
import { AuthService } from '../../services/auth.service';
import { EventService } from '../../services/event.service';
import { Event } from '../../models/event.model';
import { switchMap, combineLatest, map, of } from 'rxjs';

@Component({
  selector: 'app-my-tickets',
  templateUrl: './my-tickets.component.html',
  styleUrls: ['./my-tickets.component.css']
})
export class MyTicketsComponent implements OnInit {
  myTickets: Ticket[] = [];
  userId: number | null = null;
  errorMessage: string = '';
  eventsMap: { [key: number]: Event } = {};

  constructor(
    private ticketService: TicketService,
    private authService: AuthService,
    private eventService: EventService
  ) {}

  ngOnInit(): void {
    this.authService.getCurrentUserId().pipe(
      switchMap(id => {
        this.userId = id;
        if (id) {
          return this.ticketService.getTicketsByUserId(id);
        } else {
          this.errorMessage = 'You must be logged in to view your tickets.';
          return of([] as Ticket[]);
        }
      }),
      switchMap(tickets => {
        this.myTickets = tickets;

        const eventIds = Array.from(new Set(tickets.map(ticket => ticket.eventId)));
        if (eventIds.length === 0) return of([]);

        const eventObservables = eventIds.map(eventId =>
          this.eventService.getEventById(eventId)
        );

        return combineLatest(eventObservables).pipe(
          map(events => {
            events.forEach(event => {
              if (event.id) {
                this.eventsMap[event.id] = event;
              }
            });
            return tickets;
          })
        );
      })
    ).subscribe({
      error: err => {
        console.error('Error fetching tickets or events:', err);
        this.errorMessage = 'Failed to load your tickets. ' + (err.error || 'Please try again.');
      }
    });
  }

  getEventInfo(eventId: number): string {
    const event = this.eventsMap[eventId];
    return event ? `#${event.id} - ${event.name}` : 'Loading...';
  }

  onCancelTicket(ticketId: number | undefined): void {
    if (ticketId && confirm('Are you sure you want to cancel this ticket?')) {
      this.ticketService.cancelTicket(ticketId).subscribe({
        next: (updatedTicket) => {
          alert(`Ticket ${ticketId} has been ${updatedTicket.status}.`);
          const index = this.myTickets.findIndex(t => t.id === ticketId);
          if (index !== -1) {
            this.myTickets[index].status = updatedTicket.status;
          }
        },
        error: (err) => {
          console.error('Error cancelling ticket:', err);
          this.errorMessage = 'Failed to cancel ticket: ' + (err.error || 'Please try again.');
        }
      });
    }
  }
}


<div class="container mt-4">
  <h2>My Tickets</h2>

  <div *ngIf="errorMessage" class="alert alert-danger">
    {{ errorMessage }}
  </div>

  <div *ngIf="myTickets.length > 0">
    <table class="table table-bordered">
      <thead class="table-primary">
        <tr>
          <th>Ticket ID</th>
          <th>Event</th>
          <th>Status</th>
          <th>Booking Date</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let ticket of myTickets">
          <td>{{ ticket.id }}</td>
          <td>{{ getEventInfo(ticket.eventId) }}</td>
          <td>{{ ticket.status }}</td>
          <td>{{ ticket.bookingDate | date: 'mediumDate' }}</td>
          <td>
            <button
              class="btn btn-danger btn-sm"
              (click)="onCancelTicket(ticket.id)"
              [disabled]="ticket.status === 'CANCELLED'"
            >
              Cancel
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div *ngIf="myTickets.length === 0 && !errorMessage" class="alert alert-info">
    You have no booked tickets.
  </div>
</div>
