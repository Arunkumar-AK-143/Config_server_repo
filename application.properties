public String generateToken(String username, String role) {
    Map<String, Object> claims = new HashMap<>();
    claims.put("role", role); // Add the role to the token

    return Jwts.builder()
            .setClaims(claims)
            .setSubject(username)
            .setIssuedAt(new Date(System.currentTimeMillis()))
            .setExpiration(new Date(System.currentTimeMillis() + (60 * 60 * 1000))) // 1 hour
            .signWith(getKey())
            .compact();
}


public String verify(User user) {
    Authentication authentication = authman.authenticate(new UsernamePasswordAuthenticationToken(user.getName(), user.getPassword()));

    if (authentication.isAuthenticated()) {
        User dbUser = repo.findByName(user.getName());
        return service.generateToken(user.getName(), dbUser.getRole().name());
    } else {
        throw new RuntimeException("Authentication failed");
    }
}


if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
    try {
        UserDetails userDetails = context.getBean(myuserDetailService.class).loadUserByUsername(username);
        if (jwtService.validateToken(token, userDetails)) {
            ...
        }
    } catch (Exception e) {
        e.printStackTrace(); // Log the actual error
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        return;
    }
}


.authorizeHttpRequests(auth -> auth
    .requestMatchers("/auth/register", "/auth/login", "/users/**").permitAll()
    .anyRequest().authenticated())
