// =============================
// âœ… Updated EventListComponent (TS + HTML)
// =============================

// TypeScript: event-list.component.ts
import { Component, OnInit } from '@angular/core';
import { EventService } from '../../services/event.service';
import { Event } from '../../models/event.model';
import { HttpErrorResponse } from '@angular/common/http';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-event-list',
  templateUrl: './event-list.component.html',
  standalone: false,
  styleUrls: ['./event-list.component.css']
})
export class EventListComponent implements OnInit {
  events: Event[] = [];
  filteredEvents: Event[] = [];
  errorMessage: string = '';
  userRole: string | null = null;
  isLoading: boolean = true;
  selectedId: number | null = null;
  selectedCategory: string = '';

  constructor(
    private eventService: EventService,
    private authService: AuthService,
    public router: Router
  ) {}

  ngOnInit(): void {
    this.loadEvents();
    this.authService.getUserRole().subscribe(role => this.userRole = role);
  }

  loadEvents(): void {
    this.isLoading = true;
    this.errorMessage = '';
    this.eventService.getAllEvents().subscribe({
      next: (data: Event[]) => {
        this.events = data;
        this.filteredEvents = data;
        this.isLoading = false;
      },
      error: (error: HttpErrorResponse) => {
        this.errorMessage = this.handleError(error);
        this.isLoading = false;
      }
    });
  }

  filterEvents(): void {
    this.eventService.getFilteredEvents(this.selectedId || undefined, this.selectedCategory || undefined)
      .subscribe({
        next: events => this.filteredEvents = events,
        error: (error: HttpErrorResponse) => {
          this.errorMessage = this.handleError(error);
        }
      });
  }

  resetFilters(): void {
    this.selectedId = null;
    this.selectedCategory = '';
    this.filteredEvents = [...this.events];
  }

  viewDetails(eventId: number | undefined): void {
    if (eventId) {
      this.router.navigate(['/events', eventId]);
    } else {
      console.warn('Attempted to view details for an event without an ID.');
    }
  }

  deleteEvent(id?: number): void {
    if (!id) {
      this.errorMessage = 'Error: Event ID is missing for deletion.';
      return;
    }

    if (confirm('Are you sure you want to delete this event?')) {
      this.eventService.deleteEvent(id).subscribe({
        next: () => {
          this.events = this.events.filter(e => e.id !== id);
          this.filteredEvents = this.filteredEvents.filter(e => e.id !== id);
        },
        error: (error: HttpErrorResponse) => {
          this.errorMessage = this.handleError(error);
        }
      });
    }
  }

  private handleError(error: HttpErrorResponse): string {
    if (error.status === 401 || error.status === 403) {
      return 'You are not authorized. Please log in.';
    } else if (error.status === 404) {
      return 'Resource not found.';
    } else if (error.error instanceof ErrorEvent) {
      return `Client error: ${error.error.message}`;
    } else {
      return `Server error: ${error.status} - ${error.message}`;
    }
  }
}

// HTML Template: event-list.component.html
/*
<div class="container mt-4 event-list-container">
  <h2>Available Events</h2>

  <div class="mb-3">
    <button *ngIf="userRole === 'ADMIN'" routerLink="/events/new" class="btn btn-primary">
      <i class="fas fa-plus"></i> Add New Event
    </button>
  </div>

  <div class="mb-3">
    <input [(ngModel)]="selectedId" type="number" placeholder="Event ID" class="form-control mb-2" />
    <input [(ngModel)]="selectedCategory" placeholder="Category" class="form-control mb-2" />
    <button class="btn btn-outline-primary me-2" (click)="filterEvents()">Filter</button>
    <button class="btn btn-outline-secondary" (click)="resetFilters()">Reset</button>
  </div>

  <div *ngIf="errorMessage" class="alert alert-danger">{{ errorMessage }}</div>

  <div *ngIf="isLoading" class="text-center">
    <div class="spinner-border text-primary" role="status"></div>
    <p>Loading events...</p>
  </div>

  <div *ngIf="!isLoading && filteredEvents.length === 0 && !errorMessage" class="alert alert-info">
    <p>No events match your criteria.</p>
  </div>

  <div *ngIf="!isLoading && filteredEvents.length > 0" class="row">
    <div class="col-md-4 mb-4" *ngFor="let event of filteredEvents">
      <div class="card event-card h-100">
        <div class="card-body">
          <h5 class="card-title">
            <a [routerLink]="['/events', event.id]" class="text-decoration-none">{{ event.name }}</a>
          </h5>
          <p class="card-text"><strong>Category:</strong> {{ event.category }}</p>
          <p class="card-text"><strong>Location:</strong> {{ event.location }}</p>
          <p class="card-text"><strong>Date:</strong> {{ event.date | date:'mediumDate' }}</p>
          <p class="card-text">
            <strong>Tickets Available:</strong>
            <span [ngClass]="{
              'text-danger': event.ticketCount !== undefined && event.ticketCount <= 10,
              'text-warning': event.ticketCount > 10 && event.ticketCount <= 50,
              'text-success': event.ticketCount > 50
            }">
              {{ event.ticketCount !== undefined ? event.ticketCount : 'N/A' }}
            </span>
          </p>

          <div class="mt-2 d-flex justify-content-between align-items-center">
            <ng-container>
              <button *ngIf="event.ticketCount && event.ticketCount > 0 && userRole !== 'ADMIN'"
                      [routerLink]="['/tickets', event.id]" class="btn btn-sm btn-success me-2">
                Book Tickets
              </button>
              <span *ngIf="event.ticketCount !== undefined && event.ticketCount <= 0 && userRole !== 'ADMIN'"
                    class="text-danger me-2">Sold Out!</span>
            </ng-container>

            <button class="btn btn-primary btn-sm me-2" (click)="viewDetails(event.id)">
              View Details
            </button>

            <div *ngIf="userRole === 'ADMIN'" class="d-flex">
              <button [routerLink]="['/events/edit', event.id]" class="btn btn-sm btn-warning me-2">Edit</button>
              <button (click)="deleteEvent(event.id)" class="btn btn-sm btn-danger">Delete</button>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>
</div>
*/
