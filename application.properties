package com.cts.controller;

import com.cts.entity.Event;
import com.cts.entity.Ticket;
import com.cts.entity.User;
import com.cts.security.JwtService;
import com.cts.service.EventService;
import com.cts.service.TicketService;
import com.cts.service.UserService;

import jakarta.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/tickets") // âœ… VERY IMPORTANT
public class TicketController {

    @Autowired
    private TicketService ticketService;

    @Autowired
    private EventService eventService;

    @Autowired
    private UserService userService;

    @Autowired
    private JwtService jwtService;

    @PostMapping("/book")
    public ResponseEntity<Ticket> bookTicket(@RequestParam Long eventId, HttpServletRequest request) {
        System.out.println("---- /tickets/book called ----");
        String authHeader = request.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(401).body(null);
        }

        String token = authHeader.substring(7);
        Long userId = jwtService.extractUserId(token);

        if (userId == null) {
            return ResponseEntity.status(401).body(null);
        }

        Event event = eventService.getEventById(eventId);
        User user = userService.getUserById(userId);

        if (event == null || user == null) {
            return ResponseEntity.status(404).body(null);
        }

        Ticket ticket = ticketService.bookTicket(event, user);
        return ResponseEntity.ok(ticket);
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Ticket>> getTicketsByUserId(@PathVariable Long userId) {
        List<Ticket> tickets = ticketService.getTicketsByUserId(userId);
        return ResponseEntity.ok(tickets);
    }

    @GetMapping("/event/{eventId}")
    public ResponseEntity<List<Ticket>> getTicketsByEventId(@PathVariable Long eventId) {
        List<Ticket> tickets = ticketService.getTicketsByEventId(eventId);
        return ResponseEntity.ok(tickets);
    }

    @PutMapping("/cancel/{ticketId}")
    public ResponseEntity<Ticket> cancelTicket(@PathVariable Long ticketId) {
        Ticket ticket = ticketService.cancelTicket(ticketId);
        return ResponseEntity.ok(ticket);
    }
}