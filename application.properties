import { Component, OnInit } from '@angular/core';
import { EventService } from '../../services/event.service';
import { Event } from '../../models/event.model';
import { HttpErrorResponse } from '@angular/common/http';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router'; // ✅ Import Router

@Component({
  selector: 'app-event-list',
  templateUrl: './event-list.component.html',
  standalone: false,
  styleUrls: ['./event-list.component.css']
})
export class EventListComponent implements OnInit {
  events: Event[] = [];
  errorMessage: string = '';
  userRole: string | null = null;
  isLoading: boolean = true; // ✅ Add isLoading property

  // isAdminUser: boolean = false; // This can be replaced by checking userRole in template

  constructor(
    private eventService: EventService,
    private authService: AuthService, // Inject AuthService
    public router: Router // ✅ Inject Router and make it public
  ) { }

  ngOnInit(): void {
    this.loadEvents();
    // Check if the logged-in user is an admin
    this.authService.getUserRole().subscribe(role => this.userRole = role);
  }

  loadEvents(): void {
    this.isLoading = true; // ✅ Set loading to true
    this.errorMessage = ''; // Clear any previous error messages
    this.eventService.getAllEvents().subscribe({
      next: (data: Event[]) => {
        this.events = data;
        this.errorMessage = '';
        this.isLoading = false; // ✅ Set loading to false on success
        console.log('Events loaded successfully:', this.events); // For debugging
      },
      error: (error: HttpErrorResponse) => {
        console.error('Error fetching events:', error);
        if (error.status === 401 || error.status === 403) {
          this.errorMessage = 'You are not authorized to view events. Please log in.';
        } else if (error.status === 404) {
          this.errorMessage = 'The event list endpoint was not found.';
        } else if (error.error instanceof ErrorEvent) {
          this.errorMessage = `An error occurred: ${error.error.message}`;
        } else {
          this.errorMessage = `Error fetching events: ${error.status} - ${error.message || 'Unknown error'}`;
        }
        this.isLoading = false; // ✅ Set loading to false on error
      }
    });
  }

  // ✅ New method to navigate to event details
  viewDetails(eventId: number | undefined): void {
    if (eventId) {
      this.router.navigate(['/events', eventId]);
    } else {
      console.warn('Attempted to view details for an event without an ID.');
    }
  }

  deleteEvent(id?: number): void {
    if (id === undefined) {
      console.error('Cannot delete event: ID is undefined.');
      this.errorMessage = 'Error: Event ID is missing for deletion.';
      return;
    }

    if (confirm('Are you sure you want to delete this event?')) {
      this.eventService.deleteEvent(id).subscribe({
        next: () => {
          console.log(`Event with ID ${id} deleted successfully.`);
          this.errorMessage = ''; // Clear any previous error
          // Remove the deleted event from the local array
          this.events = this.events.filter(event => event.id !== id);
        },
        error: (error: HttpErrorResponse) => {
          console.error(`Error deleting event with ID ${id}:`, error);
          if (error.status === 401 || error.status === 403) {
            this.errorMessage = 'You are not authorized to delete events. Please log in as an Admin.';
          } else if (error.status === 404) {
            this.errorMessage = 'Event not found.';
          } else {
            this.errorMessage = `Error deleting event: ${error.message || 'Unknown error'}`;
          }
        }
      });
    }
  }
  filterEvents() {
    this.eventService.getFilteredEvents(this.selectedId, this.selectedCategory).subscribe(events => {
      this.filteredEvents = events;
    });
  }
}
       <div class="container mt-4 event-list-container">
          <h2>Available Events</h2>
        
          <div class="mb-3">
            <button *ngIf="userRole === 'ADMIN'" routerLink="/events/new" class="btn btn-primary">
              <i class="fas fa-plus"></i> Add New Event
            </button>
          </div>

          <input [(ngModel)]="selectedId" type="number" placeholder="Event ID" />
  <input [(ngModel)]="selectedCategory" placeholder="Category" />
<button (click)="filterEvents()">Filter</button>

<div *ngFor="let event of filteredEvents">
  <h3>{{ event.name }}</h3>
  <p>Category: {{ event.category }}</p>
</div>
        
          <div *ngIf="errorMessage" class="alert alert-danger" role="alert">
            {{ errorMessage }}
          </div>
        
          <div *ngIf="isLoading" class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading events...</p>
          </div>
        
          <div *ngIf="!isLoading && events.length === 0 && !errorMessage" class="no-events-message alert alert-info">
            <p>No events available at the moment. Please check back later!</p>
          </div>
        
          <div *ngIf="!isLoading && events.length > 0" class="row">
            <div class="col-md-4 mb-4" *ngFor="let event of events">
              <div class="card event-card h-100">
                <div class="card-body">
                  <h5 class="card-title">
                    <a [routerLink]="['/events', event.id]" class="text-decoration-none">
                      {{ event.name }}
                    </a>
                  </h5>
                  <p class="card-text"><strong>Category:</strong> {{ event.category }}</p>
                  <p class="card-text"><strong>Location:</strong> {{ event.location }}</p>
                  <p class="card-text"><strong>Date:</strong> {{ event.date | date:'mediumDate' }}</p>
                  <p class="card-text">
                    <strong>Tickets Available:</strong>
                    <span [ngClass]="{
                      'text-danger': event.ticketCount !== undefined && event.ticketCount <= 10,
                      'text-warning': event.ticketCount !== undefined && event.ticketCount > 10 && event.ticketCount <= 50,
                      'text-success': event.ticketCount !== undefined && event.ticketCount > 50
                    }">
                      {{ event.ticketCount !== undefined ? event.ticketCount : 'N/A' }}
                    </span>
                  </p>
        
                  <div class="mt-2 d-flex justify-content-between align-items-center">
                    <ng-container>
                      <button
                        *ngIf="event.ticketCount !== undefined && event.ticketCount > 0 && userRole !== 'ADMIN'"
                        [routerLink]="['/tickets', event.id]"
                        class="btn btn-sm btn-success flex-grow-1 me-2"
                      >
                        Book Tickets
                      </button>
                      <span *ngIf="event.ticketCount !== undefined && event.ticketCount <= 0 && userRole !== 'ADMIN'" class="text-danger flex-grow-1 me-2">Sold Out!</span>
                    </ng-container>
        
                    <button class="btn btn-primary btn-sm me-2" (click)="viewDetails(event.id)">
                      View Details
                    </button>
        
                    <div *ngIf="userRole === 'ADMIN'" class="d-flex">
                      <button
                        [routerLink]="['/events/edit', event.id]"
                        class="btn btn-sm btn-warning me-2"
                      >
                        Edit
                      </button>
                      <button
                        (click)="deleteEvent(event.id)"
                        class="btn btn-sm btn-danger"
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

