switchMap(tickets => {
  this.myTickets = tickets;

  const eventIds = Array.from(new Set(tickets.map(ticket => ticket.eventId)))
    .filter(id => id !== undefined && id !== null); // ✅ filter out bad IDs

  if (eventIds.length === 0) return of([]);

  const eventObservables = eventIds.map(eventId =>
    this.eventService.getEventById(eventId)
  );

  return combineLatest(eventObservables).pipe(
    map(events => {
      events.forEach(event => {
        if (event?.id) {
          this.eventsMap[event.id] = event;
        }
      });
      return tickets;
    })
  );
})


ngOnInit(): void {
  this.authService.getCurrentUserId().pipe(
    switchMap(id => {
      if (!id || isNaN(Number(id))) {
        this.errorMessage = 'You must be logged in to view your tickets.';
        return of([] as Ticket[]);
      }

      this.userId = id;
      return this.ticketService.getTicketsByUserId(id);
    }),
    switchMap(tickets => {
      this.myTickets = tickets;

      const eventIds = Array.from(new Set(tickets.map(ticket => ticket.eventId)))
        .filter(id => id !== undefined && id !== null); // ✅ safe IDs only

      if (eventIds.length === 0) return of([]);

      const eventObservables = eventIds.map(eventId =>
        this.eventService.getEventById(eventId)
      );

      return combineLatest(eventObservables).pipe(
        map(events => {
          events.forEach(event => {
            if (event?.id) {
              this.eventsMap[event.id] = event;
            }
          });
          return tickets;
        })
      );
    })
  ).subscribe({
    error: err => {
      console.error('Error fetching tickets or events:', err);
      this.errorMessage = 'Failed to load your tickets. ' + (err.error || 'Please try again.');
    }
  });
}
